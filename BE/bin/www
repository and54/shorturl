const app = require('../app');
const debug = require('debug')('be:server');
const http = require('http');
const dbo = require('../db/conn');

let port, server;

const initConn = () => {
  port = normalizePort(process.env.PORT || '4000');
  app.set('port', port);

  server = http.createServer(app);

  dbo.connectToServer((err) => {
    if (err) {
      console.error(err);
      process.exit();
    }

    server.listen(port, () => console.log(`Server is running on port: ${port}`));
    server.on('error', onError);
    server.on('listening', onListening);
  });
}

const normalizePort = (val) => {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

const onError = error => {
  if (error.syscall !== 'listen') throw error;

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
    default:
      throw error;
  }
}

const onListening = () => {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

initConn();